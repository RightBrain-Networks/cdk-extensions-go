package ec2patterns

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/ec2"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/networkmanager"
)

type FourTierNetworkHub interface {
	FourTierNetwork
	AddressManager() IpAddressManager
	// AZs for this VPC.
	AvailabilityZones() *[]*string
	DefaultInstanceTenancy() awsec2.DefaultInstanceTenancy
	DefaultTransitGatewayRouteTable() ec2.ITransitGatewayRouteTable
	// Indicates if instances launched in this VPC will have public DNS hostnames.
	DnsHostnamesEnabled() *bool
	// Indicates if DNS support is enabled for this VPC.
	DnsSupportEnabled() *bool
	EnableDnsHostnames() *bool
	EnableDnsSupport() *bool
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	GlobalNetwork() networkmanager.GlobalNetwork
	// If this is set to true, don't error out on trying to select subnets.
	IncompleteSubnetDefinition() *bool
	SetIncompleteSubnetDefinition(val *bool)
	// Dependencies for internet connectivity.
	InternetConnectivityEstablished() constructs.IDependable
	// Internet Gateway for the VPC.
	//
	// Note that in case the VPC is configured only
	// with ISOLATED subnets, this attribute will be `undefined`.
	InternetGatewayId() *string
	IpamPool() ec2.IIpamPool
	// List of isolated subnets in this VPC.
	IsolatedSubnets() *[]awsec2.ISubnet
	MaxAzs() *float64
	Netmask() *float64
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// List of private subnets in this VPC.
	PrivateSubnets() *[]awsec2.ISubnet
	// List of public subnets in this VPC.
	PublicSubnets() *[]awsec2.ISubnet
	Sharing() *FourTierNetworkShareProperties
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	TransitGateway() ec2.ITransitGateway
	// Arn of this VPC.
	VpcArn() *string
	// CIDR range for this VPC.
	VpcCidrBlock() *string
	VpcCidrBlockAssociations() *[]*string
	VpcDefaultNetworkAcl() *string
	VpcDefaultSecurityGroup() *string
	// Identifier for this VPC.
	VpcId() *string
	VpcIpv6CidrBlocks() *[]*string
	VpcName() *string
	// Returns the id of the VPN Gateway (if enabled).
	VpnGatewayId() *string
	AddCidrBlock(id *string, options *AddCidrBlockOptions) ec2.IVpcCidrBlock
	// Adds a new client VPN endpoint to this VPC.
	AddClientVpnEndpoint(id *string, options *awsec2.ClientVpnEndpointOptions) awsec2.ClientVpnEndpoint
	// Adds a new flow log to this VPC.
	AddFlowLog(id *string, options *awsec2.FlowLogOptions) awsec2.FlowLog
	// Adds a new gateway endpoint to this VPC.
	AddGatewayEndpoint(id *string, options *awsec2.GatewayVpcEndpointOptions) awsec2.GatewayVpcEndpoint
	// Adds a new interface endpoint to this VPC.
	AddInterfaceEndpoint(id *string, options *awsec2.InterfaceVpcEndpointOptions) awsec2.InterfaceVpcEndpoint
	AddIsolatedClientVpnEndpoint(id *string, options *AddIsolatedClientVpnEndpointOptions) NetworkIsolatedClientVpnEndpoint
	AddSpoke(scope constructs.IConstruct, id *string, props *AddSpokeNetworkProps) FourTierNetworkSpoke
	AddVpcFlowLog(id *string, options *FlowLogOptions) awsec2.FlowLog
	// Adds a new VPN connection to this VPC.
	AddVpnConnection(id *string, options *awsec2.VpnConnectionOptions) awsec2.VpnConnection
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	EnableTransitGateway(props *ec2.TransitGatewayProps) ec2.ITransitGateway
	// Adds a VPN Gateway to this VPC.
	EnableVpnGateway(options *awsec2.EnableVpnGatewayOptions)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Return the subnets appropriate for the placement strategy.
	SelectSubnetObjects(selection *awsec2.SubnetSelection) *[]awsec2.ISubnet
	// Returns IDs of selected subnets.
	SelectSubnets(selection *awsec2.SubnetSelection) *awsec2.SelectedSubnets
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for FourTierNetworkHub
type jsiiProxy_FourTierNetworkHub struct {
	jsiiProxy_FourTierNetwork
}

func (j *jsiiProxy_FourTierNetworkHub) AddressManager() IpAddressManager {
	var returns IpAddressManager
	_jsii_.Get(
		j,
		"addressManager",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) AvailabilityZones() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"availabilityZones",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) DefaultInstanceTenancy() awsec2.DefaultInstanceTenancy {
	var returns awsec2.DefaultInstanceTenancy
	_jsii_.Get(
		j,
		"defaultInstanceTenancy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) DefaultTransitGatewayRouteTable() ec2.ITransitGatewayRouteTable {
	var returns ec2.ITransitGatewayRouteTable
	_jsii_.Get(
		j,
		"defaultTransitGatewayRouteTable",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) DnsHostnamesEnabled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"dnsHostnamesEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) DnsSupportEnabled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"dnsSupportEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) EnableDnsHostnames() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"enableDnsHostnames",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) EnableDnsSupport() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"enableDnsSupport",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) GlobalNetwork() networkmanager.GlobalNetwork {
	var returns networkmanager.GlobalNetwork
	_jsii_.Get(
		j,
		"globalNetwork",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) IncompleteSubnetDefinition() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"incompleteSubnetDefinition",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) InternetConnectivityEstablished() constructs.IDependable {
	var returns constructs.IDependable
	_jsii_.Get(
		j,
		"internetConnectivityEstablished",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) InternetGatewayId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"internetGatewayId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) IpamPool() ec2.IIpamPool {
	var returns ec2.IIpamPool
	_jsii_.Get(
		j,
		"ipamPool",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) IsolatedSubnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"isolatedSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) MaxAzs() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"maxAzs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) Netmask() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"netmask",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) PrivateSubnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"privateSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) PublicSubnets() *[]awsec2.ISubnet {
	var returns *[]awsec2.ISubnet
	_jsii_.Get(
		j,
		"publicSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) Sharing() *FourTierNetworkShareProperties {
	var returns *FourTierNetworkShareProperties
	_jsii_.Get(
		j,
		"sharing",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) TransitGateway() ec2.ITransitGateway {
	var returns ec2.ITransitGateway
	_jsii_.Get(
		j,
		"transitGateway",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcCidrBlock() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcCidrBlock",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcCidrBlockAssociations() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"vpcCidrBlockAssociations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcDefaultNetworkAcl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcDefaultNetworkAcl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcDefaultSecurityGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcDefaultSecurityGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcIpv6CidrBlocks() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"vpcIpv6CidrBlocks",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpcName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpcName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FourTierNetworkHub) VpnGatewayId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"vpnGatewayId",
		&returns,
	)
	return returns
}


func NewFourTierNetworkHub(scope constructs.IConstruct, id *string, props *FourTierNetworkHubProps) FourTierNetworkHub {
	_init_.Initialize()

	if err := validateNewFourTierNetworkHubParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_FourTierNetworkHub{}

	_jsii_.Create(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

func NewFourTierNetworkHub_Override(f FourTierNetworkHub, scope constructs.IConstruct, id *string, props *FourTierNetworkHubProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		[]interface{}{scope, id, props},
		f,
	)
}

func (j *jsiiProxy_FourTierNetworkHub)SetIncompleteSubnetDefinition(val *bool) {
	if err := j.validateSetIncompleteSubnetDefinitionParameters(val); err != nil {
		panic(err)
	}
	_jsii_.Set(
		j,
		"incompleteSubnetDefinition",
		val,
	)
}

// Import an existing VPC by querying the AWS environment this stack is deployed to.
//
// This function only needs to be used to use VPCs not defined in your CDK
// application. If you are looking to share a VPC between stacks, you can
// pass the `Vpc` object between stacks and use it as normal.
//
// Calling this method will lead to a lookup when the CDK CLI is executed.
// You can therefore not use any values that will only be available at
// CloudFormation execution time (i.e., Tokens).
//
// The VPC information will be cached in `cdk.context.json` and the same VPC
// will be used on future runs. To refresh the lookup, you will have to
// evict the value from the cache using the `cdk context` command. See
// https://docs.aws.amazon.com/cdk/latest/guide/context.html for more information.
func FourTierNetworkHub_FromLookup(scope constructs.Construct, id *string, options *awsec2.VpcLookupOptions) awsec2.IVpc {
	_init_.Initialize()

	if err := validateFourTierNetworkHub_FromLookupParameters(scope, id, options); err != nil {
		panic(err)
	}
	var returns awsec2.IVpc

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"fromLookup",
		[]interface{}{scope, id, options},
		&returns,
	)

	return returns
}

// Import a VPC by supplying all attributes directly.
//
// NOTE: using `fromVpcAttributes()` with deploy-time parameters (like a `Fn.importValue()` or
// `CfnParameter` to represent a list of subnet IDs) sometimes accidentally works. It happens
// to work for constructs that need a list of subnets (like `AutoScalingGroup` and `eks.Cluster`)
// but it does not work for constructs that need individual subnets (like
// `Instance`). See https://github.com/aws/aws-cdk/issues/4118 for more
// information.
//
// Prefer to use `Vpc.fromLookup()` instead.
func FourTierNetworkHub_FromVpcAttributes(scope constructs.Construct, id *string, attrs *awsec2.VpcAttributes) awsec2.IVpc {
	_init_.Initialize()

	if err := validateFourTierNetworkHub_FromVpcAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns awsec2.IVpc

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"fromVpcAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func FourTierNetworkHub_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateFourTierNetworkHub_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func FourTierNetworkHub_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateFourTierNetworkHub_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func FourTierNetworkHub_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateFourTierNetworkHub_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func FourTierNetworkHub_DEFAULT_CIDR_RANGE() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"DEFAULT_CIDR_RANGE",
		&returns,
	)
	return returns
}

func FourTierNetworkHub_DEFAULT_SUBNETS() *[]*awsec2.SubnetConfiguration {
	_init_.Initialize()
	var returns *[]*awsec2.SubnetConfiguration
	_jsii_.StaticGet(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"DEFAULT_SUBNETS",
		&returns,
	)
	return returns
}

func FourTierNetworkHub_DEFAULT_SUBNETS_NO_NAT() *[]*awsec2.SubnetConfiguration {
	_init_.Initialize()
	var returns *[]*awsec2.SubnetConfiguration
	_jsii_.StaticGet(
		"cdk-extensions.ec2_patterns.FourTierNetworkHub",
		"DEFAULT_SUBNETS_NO_NAT",
		&returns,
	)
	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddCidrBlock(id *string, options *AddCidrBlockOptions) ec2.IVpcCidrBlock {
	if err := f.validateAddCidrBlockParameters(id, options); err != nil {
		panic(err)
	}
	var returns ec2.IVpcCidrBlock

	_jsii_.Invoke(
		f,
		"addCidrBlock",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddClientVpnEndpoint(id *string, options *awsec2.ClientVpnEndpointOptions) awsec2.ClientVpnEndpoint {
	if err := f.validateAddClientVpnEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.ClientVpnEndpoint

	_jsii_.Invoke(
		f,
		"addClientVpnEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddFlowLog(id *string, options *awsec2.FlowLogOptions) awsec2.FlowLog {
	if err := f.validateAddFlowLogParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.FlowLog

	_jsii_.Invoke(
		f,
		"addFlowLog",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddGatewayEndpoint(id *string, options *awsec2.GatewayVpcEndpointOptions) awsec2.GatewayVpcEndpoint {
	if err := f.validateAddGatewayEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.GatewayVpcEndpoint

	_jsii_.Invoke(
		f,
		"addGatewayEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddInterfaceEndpoint(id *string, options *awsec2.InterfaceVpcEndpointOptions) awsec2.InterfaceVpcEndpoint {
	if err := f.validateAddInterfaceEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.InterfaceVpcEndpoint

	_jsii_.Invoke(
		f,
		"addInterfaceEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddIsolatedClientVpnEndpoint(id *string, options *AddIsolatedClientVpnEndpointOptions) NetworkIsolatedClientVpnEndpoint {
	if err := f.validateAddIsolatedClientVpnEndpointParameters(id, options); err != nil {
		panic(err)
	}
	var returns NetworkIsolatedClientVpnEndpoint

	_jsii_.Invoke(
		f,
		"addIsolatedClientVpnEndpoint",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddSpoke(scope constructs.IConstruct, id *string, props *AddSpokeNetworkProps) FourTierNetworkSpoke {
	if err := f.validateAddSpokeParameters(scope, id, props); err != nil {
		panic(err)
	}
	var returns FourTierNetworkSpoke

	_jsii_.Invoke(
		f,
		"addSpoke",
		[]interface{}{scope, id, props},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddVpcFlowLog(id *string, options *FlowLogOptions) awsec2.FlowLog {
	if err := f.validateAddVpcFlowLogParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.FlowLog

	_jsii_.Invoke(
		f,
		"addVpcFlowLog",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) AddVpnConnection(id *string, options *awsec2.VpnConnectionOptions) awsec2.VpnConnection {
	if err := f.validateAddVpnConnectionParameters(id, options); err != nil {
		panic(err)
	}
	var returns awsec2.VpnConnection

	_jsii_.Invoke(
		f,
		"addVpnConnection",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := f.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		f,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (f *jsiiProxy_FourTierNetworkHub) EnableTransitGateway(props *ec2.TransitGatewayProps) ec2.ITransitGateway {
	if err := f.validateEnableTransitGatewayParameters(props); err != nil {
		panic(err)
	}
	var returns ec2.ITransitGateway

	_jsii_.Invoke(
		f,
		"enableTransitGateway",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) EnableVpnGateway(options *awsec2.EnableVpnGatewayOptions) {
	if err := f.validateEnableVpnGatewayParameters(options); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		f,
		"enableVpnGateway",
		[]interface{}{options},
	)
}

func (f *jsiiProxy_FourTierNetworkHub) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		f,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := f.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		f,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) GetResourceNameAttribute(nameAttr *string) *string {
	if err := f.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		f,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) SelectSubnetObjects(selection *awsec2.SubnetSelection) *[]awsec2.ISubnet {
	if err := f.validateSelectSubnetObjectsParameters(selection); err != nil {
		panic(err)
	}
	var returns *[]awsec2.ISubnet

	_jsii_.Invoke(
		f,
		"selectSubnetObjects",
		[]interface{}{selection},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) SelectSubnets(selection *awsec2.SubnetSelection) *awsec2.SelectedSubnets {
	if err := f.validateSelectSubnetsParameters(selection); err != nil {
		panic(err)
	}
	var returns *awsec2.SelectedSubnets

	_jsii_.Invoke(
		f,
		"selectSubnets",
		[]interface{}{selection},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FourTierNetworkHub) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		f,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

