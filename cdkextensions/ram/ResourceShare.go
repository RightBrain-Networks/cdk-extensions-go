package ram

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsram"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/ram/internal"
)

// Creates a resource share that can used to share AWS resources with other AWS accounts, organizations, or organizational units (OU's).
// See: [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html)
//
type ResourceShare interface {
	awscdk.Resource
	IResourceShare
	// Specifies whether principals outside your organization in AWS Organizations can be associated with a resource share.
	//
	// A value of `true`
	// lets you share with individual AWS accounts that are not in your
	// organization. A value of `false` only has meaning if your account is a
	// member of an AWS Organization.
	//
	// In order for an account to be auto discovered it must be part of the same
	// CDK application. It must also be an explicitly defined environment and not
	// environment agnostic.
	// See: [CDK Environments](https://docs.aws.amazon.com/cdk/v2/guide/environments.html)
	//
	AllowExternalPrincipals() *bool
	AutoDiscovery() *bool
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// Specifies the name of the resource share.
	// See: [ResourceShare.Name](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html#cfn-ram-resourceshare-name)
	//
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The underlying ResourceShare CloudFormation resource.
	// See: [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html)
	//
	Resource() awsram.CfnResourceShare
	// {@inheritdoc IResourceShare.resourceShareArn}.
	ResourceShareArn() *string
	// {@inheritdoc IResourceShare.resourceShareId}.
	ResourceShareId() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// {@inheritdoc IResourceShare.addPrincipal}.
	AddPrincipal(principal ISharedPrincipal)
	// {@inheritdoc IResourceShare.addResource}.
	AddResource(resource ISharable)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	EnableAutoDiscovery()
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for ResourceShare
type jsiiProxy_ResourceShare struct {
	internal.Type__awscdkResource
	jsiiProxy_IResourceShare
}

func (j *jsiiProxy_ResourceShare) AllowExternalPrincipals() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"allowExternalPrincipals",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) AutoDiscovery() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"autoDiscovery",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) Resource() awsram.CfnResourceShare {
	var returns awsram.CfnResourceShare
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) ResourceShareArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"resourceShareArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) ResourceShareId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"resourceShareId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ResourceShare) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Creates a new instance of the ResourceShare class.
func NewResourceShare(scope constructs.Construct, id *string, props *ResourceShareProps) ResourceShare {
	_init_.Initialize()

	if err := validateNewResourceShareParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_ResourceShare{}

	_jsii_.Create(
		"cdk-extensions.ram.ResourceShare",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the ResourceShare class.
func NewResourceShare_Override(r ResourceShare, scope constructs.Construct, id *string, props *ResourceShareProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.ram.ResourceShare",
		[]interface{}{scope, id, props},
		r,
	)
}

// Imports an existing RAM resource share by specifying its Amazon Resource Name (ARN).
//
// Returns: An object representing the imported RAM resource share.
func ResourceShare_FromResourceShareArn(scope constructs.IConstruct, id *string, resourceShareArn *string) IResourceShare {
	_init_.Initialize()

	if err := validateResourceShare_FromResourceShareArnParameters(scope, id, resourceShareArn); err != nil {
		panic(err)
	}
	var returns IResourceShare

	_jsii_.StaticInvoke(
		"cdk-extensions.ram.ResourceShare",
		"fromResourceShareArn",
		[]interface{}{scope, id, resourceShareArn},
		&returns,
	)

	return returns
}

// Imports an existing RAM resource share by explicitly specifying its attributes.
//
// Returns: An object representing the imported RAM resource share.
func ResourceShare_FromResourceShareAttributes(scope constructs.IConstruct, id *string, attrs *ResourceShareAttributes) IResourceShare {
	_init_.Initialize()

	if err := validateResourceShare_FromResourceShareAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IResourceShare

	_jsii_.StaticInvoke(
		"cdk-extensions.ram.ResourceShare",
		"fromResourceShareAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Imports an existing RAM resource share by specifying its AWS generated ID.
//
// Returns: An object representing the imported RAM resource share.
func ResourceShare_FromResourceShareId(scope constructs.IConstruct, id *string, resourceShareId *string) IResourceShare {
	_init_.Initialize()

	if err := validateResourceShare_FromResourceShareIdParameters(scope, id, resourceShareId); err != nil {
		panic(err)
	}
	var returns IResourceShare

	_jsii_.StaticInvoke(
		"cdk-extensions.ram.ResourceShare",
		"fromResourceShareId",
		[]interface{}{scope, id, resourceShareId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func ResourceShare_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateResourceShare_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ram.ResourceShare",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func ResourceShare_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateResourceShare_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ram.ResourceShare",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func ResourceShare_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateResourceShare_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ram.ResourceShare",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func ResourceShare_ARN_FORMAT() awscdk.ArnFormat {
	_init_.Initialize()
	var returns awscdk.ArnFormat
	_jsii_.StaticGet(
		"cdk-extensions.ram.ResourceShare",
		"ARN_FORMAT",
		&returns,
	)
	return returns
}

func (r *jsiiProxy_ResourceShare) AddPrincipal(principal ISharedPrincipal) {
	if err := r.validateAddPrincipalParameters(principal); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		r,
		"addPrincipal",
		[]interface{}{principal},
	)
}

func (r *jsiiProxy_ResourceShare) AddResource(resource ISharable) {
	if err := r.validateAddResourceParameters(resource); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		r,
		"addResource",
		[]interface{}{resource},
	)
}

func (r *jsiiProxy_ResourceShare) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := r.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		r,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (r *jsiiProxy_ResourceShare) EnableAutoDiscovery() {
	_jsii_.InvokeVoid(
		r,
		"enableAutoDiscovery",
		nil, // no parameters
	)
}

func (r *jsiiProxy_ResourceShare) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		r,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_ResourceShare) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := r.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		r,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_ResourceShare) GetResourceNameAttribute(nameAttr *string) *string {
	if err := r.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		r,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_ResourceShare) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		r,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

