package ec2

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/ec2/internal"
)

// Specifies thje details of a remote endpoint that can serve as an endpoint for connections to AWS.
type CustomerGateway interface {
	awscdk.Resource
	ICustomerGateway
	// For devices that support BGP, the customer gateway's BGP ASN.
	// See: [CustomerGateway BgpAsn](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-customergateway.html#cfn-ec2-customergateway-bgpasn)
	//
	BgpAsn() *float64
	// The type of VPN connection that this customer gateway supports.
	// See: [CustomerGateway Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-customergateway.html#cfn-ec2-customergateway-type)
	//
	ConnectionType() VpnConnectionType
	// The BGP ASN of the customer gateway.
	CustomerGatewayAsn() *float64
	// The ID of the customer gateway.
	CustomerGatewayId() *string
	// The IP address of the customer gateway.
	CustomerGatewayIp() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The Internet-routable IP address for the customer gateway's outside interface.
	//
	// The address must be static.
	// See: [CustomerGateway IpAddress](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-customergateway.html#cfn-ec2-customergateway-ipaddress)
	//
	IpAddress() *string
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The underlying CustomerGateway CloudFormation resource.
	// See: [AWS::EC2::CustomerGateway](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-customergateway.html)
	//
	Resource() awsec2.CfnCustomerGateway
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for CustomerGateway
type jsiiProxy_CustomerGateway struct {
	internal.Type__awscdkResource
	jsiiProxy_ICustomerGateway
}

func (j *jsiiProxy_CustomerGateway) BgpAsn() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"bgpAsn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) ConnectionType() VpnConnectionType {
	var returns VpnConnectionType
	_jsii_.Get(
		j,
		"connectionType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) CustomerGatewayAsn() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"customerGatewayAsn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) CustomerGatewayId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"customerGatewayId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) CustomerGatewayIp() *string {
	var returns *string
	_jsii_.Get(
		j,
		"customerGatewayIp",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) IpAddress() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipAddress",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) Resource() awsec2.CfnCustomerGateway {
	var returns awsec2.CfnCustomerGateway
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomerGateway) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Creates a new instance of the CustomerGateway class.
func NewCustomerGateway(scope constructs.Construct, id *string, props *CustomerGatewayProps) CustomerGateway {
	_init_.Initialize()

	if err := validateNewCustomerGatewayParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_CustomerGateway{}

	_jsii_.Create(
		"cdk-extensions.ec2.CustomerGateway",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the CustomerGateway class.
func NewCustomerGateway_Override(c CustomerGateway, scope constructs.Construct, id *string, props *CustomerGatewayProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.ec2.CustomerGateway",
		[]interface{}{scope, id, props},
		c,
	)
}

// Imports an existing custom gateway by specifying its details.
//
// Returns: An object representing the imported customer gateway.
func CustomerGateway_FromCustomerGatewayAttributes(scope constructs.IConstruct, id *string, attributes *CustomerGatewayAttributes) ICustomerGateway {
	_init_.Initialize()

	if err := validateCustomerGateway_FromCustomerGatewayAttributesParameters(scope, id, attributes); err != nil {
		panic(err)
	}
	var returns ICustomerGateway

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.CustomerGateway",
		"fromCustomerGatewayAttributes",
		[]interface{}{scope, id, attributes},
		&returns,
	)

	return returns
}

// Imports an existing custom gateway using its CustomerGatewayId.
//
// Returns: An object representing the imported customer gateway.
func CustomerGateway_FromCustomerGatewayId(scope constructs.IConstruct, id *string, customerGatewayId *string) ICustomerGateway {
	_init_.Initialize()

	if err := validateCustomerGateway_FromCustomerGatewayIdParameters(scope, id, customerGatewayId); err != nil {
		panic(err)
	}
	var returns ICustomerGateway

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.CustomerGateway",
		"fromCustomerGatewayId",
		[]interface{}{scope, id, customerGatewayId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func CustomerGateway_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateCustomerGateway_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.CustomerGateway",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func CustomerGateway_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateCustomerGateway_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.CustomerGateway",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func CustomerGateway_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateCustomerGateway_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.CustomerGateway",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomerGateway) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := c.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		c,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (c *jsiiProxy_CustomerGateway) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomerGateway) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := c.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		c,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomerGateway) GetResourceNameAttribute(nameAttr *string) *string {
	if err := c.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		c,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomerGateway) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

