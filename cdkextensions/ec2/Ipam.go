package ec2

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/ec2/internal"
)

// Represents an AWS IP Address Manager.
//
// IPAM is a VPC feature that you can use to automate your IP address
// management workflows including assigning, tracking, troubleshooting, and
// auditing IP addresses across AWS Regions and accounts throughout your AWS
// Organization.
// See: [AWS::EC2::IPAM](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipam.html)
//
type Ipam interface {
	awscdk.Resource
	IIpam
	// The IPAM's default private scope.
	DefaultPrivateScope() IPrivateIpamScope
	// The IPAM's default public scope.
	DefaultPublicScope() IPublicIpamScope
	// The description for the IPAM.
	// See: [IPAM Description](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipam.html#cfn-ec2-ipam-description)
	//
	Description() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The ARN of the IPAM.
	IpamArn() *string
	// The ID of the IPAM.
	IpamId() *string
	// The ID of the IPAM's default private scope.
	IpamPrivateDefaultScopeId() *string
	// The ID of the IPAM's default public scope.
	IpamPublicDefaultScopeId() *string
	// The number of scopes in the IPAM.
	//
	// The scope quota is 5.
	IpamScopeCount() *float64
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// An immutable collection of operating Regions for an IPAM.
	//
	// Operating Regions are AWS Regions where the IPAM is allowed to manage IP
	// address CIDRs. IPAM only discovers and monitors resources in the AWS
	// Regions you select as operating Regions.
	// See: [Create an IPAM](https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html)
	//
	Regions() *[]*string
	// The underlying IPAM CloudFormation resource.
	// See: [AWS::EC2::IPAM](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipam.html)
	//
	Resource() awsec2.CfnIPAM
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Adds an operating region to the IPAM.
	//
	// The operating Regions for an IPAM. Operating Regions are AWS Regions where
	// the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and
	// monitors resources in the AWS Regions you select as operating Regions.
	AddRegion(region *string)
	// Adds an IPAM scope to the IPAM.
	//
	// In IPAM, a scope is the highest-level container within IPAM. Scopes enable
	// you to reuse IP addresses across multiple unconnected networks without
	// causing IP address overlap or conflict.
	//
	// Returns: The scope that was added to the IPAM.
	// See: [How IPAM works](https://docs.aws.amazon.com/vpc/latest/ipam/how-it-works-ipam.html)
	//
	AddScope(id *string, options *PrivateIpamScopeOptions) IPrivateIpamScope
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Associates an existing IPAM resource discovery with the IPAM.
	//
	// IPAM aggregates the resource CIDRs discovered by the associated resource
	// discovery.
	//
	// Returns: The association resource that handles the association between the
	// IPAM and the resource discovery.
	AssociateResourceDiscovery(resourceDiscovery IIpamResourceDiscovery) IIpamResourceDiscoveryAssociation
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Ipam
type jsiiProxy_Ipam struct {
	internal.Type__awscdkResource
	jsiiProxy_IIpam
}

func (j *jsiiProxy_Ipam) DefaultPrivateScope() IPrivateIpamScope {
	var returns IPrivateIpamScope
	_jsii_.Get(
		j,
		"defaultPrivateScope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) DefaultPublicScope() IPublicIpamScope {
	var returns IPublicIpamScope
	_jsii_.Get(
		j,
		"defaultPublicScope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) IpamArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipamArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) IpamId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipamId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) IpamPrivateDefaultScopeId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipamPrivateDefaultScopeId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) IpamPublicDefaultScopeId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ipamPublicDefaultScopeId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) IpamScopeCount() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"ipamScopeCount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) Regions() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"regions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) Resource() awsec2.CfnIPAM {
	var returns awsec2.CfnIPAM
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ipam) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Creates a new instance of the Ipam class.
func NewIpam(scope constructs.IConstruct, id *string, props *IpamProps) Ipam {
	_init_.Initialize()

	if err := validateNewIpamParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Ipam{}

	_jsii_.Create(
		"cdk-extensions.ec2.Ipam",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the Ipam class.
func NewIpam_Override(i Ipam, scope constructs.IConstruct, id *string, props *IpamProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.ec2.Ipam",
		[]interface{}{scope, id, props},
		i,
	)
}

// Imports an existing IPAM by specifying its Amazon Resource Name (ARN).
//
// Returns: An object representing the imported IPAM.
func Ipam_FromIpamArn(scope constructs.IConstruct, id *string, ipamArn *string) IIpam {
	_init_.Initialize()

	if err := validateIpam_FromIpamArnParameters(scope, id, ipamArn); err != nil {
		panic(err)
	}
	var returns IIpam

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.Ipam",
		"fromIpamArn",
		[]interface{}{scope, id, ipamArn},
		&returns,
	)

	return returns
}

// Imports an existing IAPM by explicitly specifying its attributes.
//
// Returns: An object representing the imported IPAM.
func Ipam_FromIpamAttributes(scope constructs.IConstruct, id *string, attrs *IpamAttributes) IIpam {
	_init_.Initialize()

	if err := validateIpam_FromIpamAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IIpam

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.Ipam",
		"fromIpamAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Imports an existing IPAM by explicitly specifying its AWS generated ID.
//
// Returns: An object representing the imported IPAM.
func Ipam_FromIpamId(scope constructs.IConstruct, id *string, ipamId *string) IIpam {
	_init_.Initialize()

	if err := validateIpam_FromIpamIdParameters(scope, id, ipamId); err != nil {
		panic(err)
	}
	var returns IIpam

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.Ipam",
		"fromIpamId",
		[]interface{}{scope, id, ipamId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func Ipam_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateIpam_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.Ipam",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func Ipam_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateIpam_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.Ipam",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func Ipam_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateIpam_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.Ipam",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Ipam_ARN_FORMAT() awscdk.ArnFormat {
	_init_.Initialize()
	var returns awscdk.ArnFormat
	_jsii_.StaticGet(
		"cdk-extensions.ec2.Ipam",
		"ARN_FORMAT",
		&returns,
	)
	return returns
}

func (i *jsiiProxy_Ipam) AddRegion(region *string) {
	if err := i.validateAddRegionParameters(region); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		i,
		"addRegion",
		[]interface{}{region},
	)
}

func (i *jsiiProxy_Ipam) AddScope(id *string, options *PrivateIpamScopeOptions) IPrivateIpamScope {
	if err := i.validateAddScopeParameters(id, options); err != nil {
		panic(err)
	}
	var returns IPrivateIpamScope

	_jsii_.Invoke(
		i,
		"addScope",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_Ipam) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := i.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		i,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (i *jsiiProxy_Ipam) AssociateResourceDiscovery(resourceDiscovery IIpamResourceDiscovery) IIpamResourceDiscoveryAssociation {
	if err := i.validateAssociateResourceDiscoveryParameters(resourceDiscovery); err != nil {
		panic(err)
	}
	var returns IIpamResourceDiscoveryAssociation

	_jsii_.Invoke(
		i,
		"associateResourceDiscovery",
		[]interface{}{resourceDiscovery},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_Ipam) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_Ipam) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := i.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		i,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_Ipam) GetResourceNameAttribute(nameAttr *string) *string {
	if err := i.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		i,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_Ipam) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

