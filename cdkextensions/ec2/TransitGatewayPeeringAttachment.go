package ec2

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/constructs-go/constructs/v10"
)

// Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter).
//
// The peer transit
// gateway can be in your account or a different AWS account.
//
// After you create the peering attachment, the owner of the accepter transit
// gateway must accept the attachment request.
// See: [AWS::EC2::TransitGatewayPeeringAttachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewaypeeringattachment.html)
//
type TransitGatewayPeeringAttachment interface {
	TransitGatewayAttachmentBase
	ITransitGatewayPeeringAttachment
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The local side of the transit gateway peering connection.
	// See: [TransitGatewayPeeringAttachment TransitGatewayId](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewaypeeringattachment.html#cfn-ec2-transitgatewaypeeringattachment-transitgatewayid)
	//
	LocalTransitGateway() ITransitGateway
	// The name of the transit gateway peering attachment.
	//
	// Used to tag the attachment with a name that will be displayed in the AWS
	// EC2 console.
	// See: [TransitGatewayPeeringAttachment Tags](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewaypeeringattachment.html#cfn-ec2-transitgatewaypeeringattachment-tags)
	//
	Name() *string
	// The tree node.
	Node() constructs.Node
	// The account that contains the transit gateway being peered with.
	// See: [TransitGatewayPeeringAttachment PeerAccountId](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewaypeeringattachment.html#cfn-ec2-transitgatewaypeeringattachment-peeraccountid)
	//
	PeerAccountId() *string
	// The region that contains the transit gateway being peered with.
	// See: [TransitGatewayPeeringAttachment PeerRegion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewaypeeringattachment.html#cfn-ec2-transitgatewaypeeringattachment-peerregion)
	//
	PeerRegion() *string
	// The remote transit gateway being peered with.
	// See: [TransitGatewayPeeringAttachment PeerTransitGatewayId](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewaypeeringattachment.html#cfn-ec2-transitgatewaypeeringattachment-peertransitgatewayid)
	//
	PeerTransitGateway() ITransitGateway
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The underlying TransitGatewayRouteTable CloudFormation resource.
	// See: [AWS::EC2::TransitGatewayRouteTable](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetable.html)
	//
	Resource() awsec2.CfnTransitGatewayPeeringAttachment
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// The ARN of this transit gateway peering attachment.
	TransitGatewayAttachmentArn() *string
	// The time the transit gateway peering attachment was created.
	TransitGatewayAttachmentCreationTime() *string
	// The ID of this transit gateway peering attachment.
	TransitGatewayAttachmentId() *string
	// The state of the transit gateway peering attachment.
	TransitGatewayAttachmentState() *string
	// The status of the transit gateway peering attachment.
	TransitGatewayAttachmentStatus() *string
	// The status code for the current status of the attachment.
	TransitGatewayAttachmentStatusCode() *string
	// The status message for the current status of the attachment.
	TransitGatewayAttachmentStatusMessage() *string
	// Adds a route that directs traffic to this transit gateway attachment.
	//
	// Returns: The TransitGatewayRoute that was added.
	AddRoute(cidr *string, routeTable ITransitGatewayRouteTable) ITransitGatewayRoute
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for TransitGatewayPeeringAttachment
type jsiiProxy_TransitGatewayPeeringAttachment struct {
	jsiiProxy_TransitGatewayAttachmentBase
	jsiiProxy_ITransitGatewayPeeringAttachment
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) LocalTransitGateway() ITransitGateway {
	var returns ITransitGateway
	_jsii_.Get(
		j,
		"localTransitGateway",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) PeerAccountId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"peerAccountId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) PeerRegion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"peerRegion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) PeerTransitGateway() ITransitGateway {
	var returns ITransitGateway
	_jsii_.Get(
		j,
		"peerTransitGateway",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) Resource() awsec2.CfnTransitGatewayPeeringAttachment {
	var returns awsec2.CfnTransitGatewayPeeringAttachment
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentCreationTime() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentCreationTime",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentState() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentState",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentStatus() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentStatus",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentStatusCode() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentStatusCode",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_TransitGatewayPeeringAttachment) TransitGatewayAttachmentStatusMessage() *string {
	var returns *string
	_jsii_.Get(
		j,
		"transitGatewayAttachmentStatusMessage",
		&returns,
	)
	return returns
}


// Creates a new instance of the TransitGatewayPeeringAttachment class.
func NewTransitGatewayPeeringAttachment(scope constructs.Construct, id *string, props *TransitGatewayPeeringAttachmentProps) TransitGatewayPeeringAttachment {
	_init_.Initialize()

	if err := validateNewTransitGatewayPeeringAttachmentParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_TransitGatewayPeeringAttachment{}

	_jsii_.Create(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the TransitGatewayPeeringAttachment class.
func NewTransitGatewayPeeringAttachment_Override(t TransitGatewayPeeringAttachment, scope constructs.Construct, id *string, props *TransitGatewayPeeringAttachmentProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		[]interface{}{scope, id, props},
		t,
	)
}

// Imports an existing transit gateway peering attachment using its ARN.
//
// Returns: An object representing the imported transit gateway peering
// attachment.
func TransitGatewayPeeringAttachment_FromTransitGatewayPeeringAttachmentArn(scope constructs.IConstruct, id *string, arn *string) ITransitGatewayPeeringAttachment {
	_init_.Initialize()

	if err := validateTransitGatewayPeeringAttachment_FromTransitGatewayPeeringAttachmentArnParameters(scope, id, arn); err != nil {
		panic(err)
	}
	var returns ITransitGatewayPeeringAttachment

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		"fromTransitGatewayPeeringAttachmentArn",
		[]interface{}{scope, id, arn},
		&returns,
	)

	return returns
}

// Imports an existing transit gateway peering attachment by defining its components.
//
// Returns: An object representing the imported transit gateway peering
// attachment.
func TransitGatewayPeeringAttachment_FromTransitGatewayPeeringAttachmentAttributes(scope constructs.IConstruct, id *string, attrs *TransitGatewayPeeringAttachmentImportAttributes) ITransitGatewayPeeringAttachment {
	_init_.Initialize()

	if err := validateTransitGatewayPeeringAttachment_FromTransitGatewayPeeringAttachmentAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns ITransitGatewayPeeringAttachment

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		"fromTransitGatewayPeeringAttachmentAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Imports an existing transit gateway peering attachment using its attachment ID.
//
// Returns: An object representing the imported transit gateway peering
// attachment.
func TransitGatewayPeeringAttachment_FromTransitGatewayPeeringAttachmentId(scope constructs.IConstruct, id *string, attachmentId *string) ITransitGatewayPeeringAttachment {
	_init_.Initialize()

	if err := validateTransitGatewayPeeringAttachment_FromTransitGatewayPeeringAttachmentIdParameters(scope, id, attachmentId); err != nil {
		panic(err)
	}
	var returns ITransitGatewayPeeringAttachment

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		"fromTransitGatewayPeeringAttachmentId",
		[]interface{}{scope, id, attachmentId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func TransitGatewayPeeringAttachment_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateTransitGatewayPeeringAttachment_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func TransitGatewayPeeringAttachment_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateTransitGatewayPeeringAttachment_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func TransitGatewayPeeringAttachment_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateTransitGatewayPeeringAttachment_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.ec2.TransitGatewayPeeringAttachment",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TransitGatewayPeeringAttachment) AddRoute(cidr *string, routeTable ITransitGatewayRouteTable) ITransitGatewayRoute {
	if err := t.validateAddRouteParameters(cidr, routeTable); err != nil {
		panic(err)
	}
	var returns ITransitGatewayRoute

	_jsii_.Invoke(
		t,
		"addRoute",
		[]interface{}{cidr, routeTable},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TransitGatewayPeeringAttachment) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := t.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		t,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (t *jsiiProxy_TransitGatewayPeeringAttachment) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TransitGatewayPeeringAttachment) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := t.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		t,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TransitGatewayPeeringAttachment) GetResourceNameAttribute(nameAttr *string) *string {
	if err := t.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		t,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TransitGatewayPeeringAttachment) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

