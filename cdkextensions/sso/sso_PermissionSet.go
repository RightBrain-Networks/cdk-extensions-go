package sso

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awssso"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/sso/internal"
)

// Specifies a permission set within a specified IAM Identity Center instance.
type PermissionSet interface {
	awscdk.Resource
	IPermissionSet
	// A user friendly description providing details about the permission set.
	Description() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The ARN of the IAM Identity Center instance under which the operation will be executed.
	Instance() IInstance
	// The name of the permission set.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Specifies the configuration of the AWS managed or customer managed policy that you want to set as a permissions boundary.
	//
	// Specify either
	// CustomerManagedPolicyReference to use the name and path of a customer
	// managed policy, or ManagedPolicyArn to use the ARN of an AWS managed
	// policy. A permissions boundary represents the maximum permissions that
	// any policy can grant your role. For more information, see [Permissions
	// boundaries](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) for IAM entities in the AWS Identity and Access Management
	// User Guide.
	PermissionsBoundary() PermissionsBoundary
	// The permission set ARN of the permission set, such as `arn:aws:sso:::permissionSet/ins-instanceid/ps-permissionsetid`.
	PermissionSetArn() *string
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	PhysicalName() *string
	// Used to redirect users within the application during the federation authentication process.
	//
	// For example, you can redirect users to a
	// specific page that is most applicable to their job after singing in to
	// an AWS account.
	RelayState() *string
	// The underlying PermissionSet CloudFormation resource.
	Resource() awssso.CfnPermissionSet
	// The length of time that the application user sessions are valid for.
	SessionDuration() awscdk.Duration
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Adds a custom managed policy to the permission set.
	//
	// When using customer
	// managed policies it is required that a managed policy with a matching
	// name and path exist in any AWS account for which the permission set
	// will be assigned.
	//
	// Returns: A dynamically generated ManagedPolicy class that can be used
	// to create compatible managed policies in other accounts.
	AddCustomerManagedPolicy(options *ReferenceOptions) ReferencedManagedPolicy
	// Adds a new Managed Policy to the permission set.
	//
	// Only Managed Policies
	// created and maintained by AWS are supported. To add a custom Managed
	// Policy that you control use the {@link addCustomerManagedPolicy} method.
	//
	// Returns: The Permission Set resource the Managed Policy was added to.
	AddManagedPolicy(policy awsiam.IManagedPolicy) PermissionSet
	// Adds a permission to the permission set's default policy document.
	//
	// If there is no default policy attached to this permission set, it will be created.
	//
	// Returns: An [AddToPrincipalPolicyResult](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_iam.AddToPrincipalPolicyResult.html) object that provides details of
	// the result of the operation.
	AddToPrincipalPolicy(statement awsiam.PolicyStatement) *awsiam.AddToPrincipalPolicyResult
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for PermissionSet
type jsiiProxy_PermissionSet struct {
	internal.Type__awscdkResource
	jsiiProxy_IPermissionSet
}

func (j *jsiiProxy_PermissionSet) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) Instance() IInstance {
	var returns IInstance
	_jsii_.Get(
		j,
		"instance",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) PermissionsBoundary() PermissionsBoundary {
	var returns PermissionsBoundary
	_jsii_.Get(
		j,
		"permissionsBoundary",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) PermissionSetArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"permissionSetArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) RelayState() *string {
	var returns *string
	_jsii_.Get(
		j,
		"relayState",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) Resource() awssso.CfnPermissionSet {
	var returns awssso.CfnPermissionSet
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) SessionDuration() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"sessionDuration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PermissionSet) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Creates a new instance of the PermissionSet class.
func NewPermissionSet(scope constructs.Construct, id *string, props *PermissionSetProps) PermissionSet {
	_init_.Initialize()

	if err := validateNewPermissionSetParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_PermissionSet{}

	_jsii_.Create(
		"cdk-extensions.sso.PermissionSet",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the PermissionSet class.
func NewPermissionSet_Override(p PermissionSet, scope constructs.Construct, id *string, props *PermissionSetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.sso.PermissionSet",
		[]interface{}{scope, id, props},
		p,
	)
}

func PermissionSet_FromArn(scope constructs.Construct, id *string, arn *string) IPermissionSet {
	_init_.Initialize()

	if err := validatePermissionSet_FromArnParameters(scope, id, arn); err != nil {
		panic(err)
	}
	var returns IPermissionSet

	_jsii_.StaticInvoke(
		"cdk-extensions.sso.PermissionSet",
		"fromArn",
		[]interface{}{scope, id, arn},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func PermissionSet_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validatePermissionSet_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.sso.PermissionSet",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func PermissionSet_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePermissionSet_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.sso.PermissionSet",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func PermissionSet_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePermissionSet_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.sso.PermissionSet",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) AddCustomerManagedPolicy(options *ReferenceOptions) ReferencedManagedPolicy {
	if err := p.validateAddCustomerManagedPolicyParameters(options); err != nil {
		panic(err)
	}
	var returns ReferencedManagedPolicy

	_jsii_.Invoke(
		p,
		"addCustomerManagedPolicy",
		[]interface{}{options},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) AddManagedPolicy(policy awsiam.IManagedPolicy) PermissionSet {
	if err := p.validateAddManagedPolicyParameters(policy); err != nil {
		panic(err)
	}
	var returns PermissionSet

	_jsii_.Invoke(
		p,
		"addManagedPolicy",
		[]interface{}{policy},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) AddToPrincipalPolicy(statement awsiam.PolicyStatement) *awsiam.AddToPrincipalPolicyResult {
	if err := p.validateAddToPrincipalPolicyParameters(statement); err != nil {
		panic(err)
	}
	var returns *awsiam.AddToPrincipalPolicyResult

	_jsii_.Invoke(
		p,
		"addToPrincipalPolicy",
		[]interface{}{statement},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := p.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (p *jsiiProxy_PermissionSet) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := p.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) GetResourceNameAttribute(nameAttr *string) *string {
	if err := p.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PermissionSet) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

