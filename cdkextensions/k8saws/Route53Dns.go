package k8saws

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awseks"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/k8saws/internal"
)

// External DNS is a Kubernetes service that make Kubernetes resources dicoverable via public DNS servers.
//
// It retrieves a list of resources
// (Services, Ingresses, etc.) from the Kubernetes API to determine a desired
// list of DNS records and configures DNS providers accordingly.
//
// The version provided here specifically targets Amazon's Route 53 service and
// all options provded are for configuring Route 53. After being installed
// external-dns will create and manage Route 53 DNS records automatically to
// allow easy network access to your pods and services.
// See: [Kubernetes SIGs](https://github.com/kubernetes-sigs/external-dns)
//
type Route53Dns interface {
	awscdk.Resource
	// Maximum number of retries for AWS API calls before giving up.
	ApiRetries() *float64
	// Set the maximum number of changes that will be applied in each batch.
	BatchChangeSize() *float64
	// The Helm chart that provides the installation of external-dns.
	Chart() awseks.HelmChart
	// The EKS cluster where external-dns should be deployed.
	Cluster() awseks.ICluster
	// The domain suffixes that control which hosted zones external-dns is allowed to make changes for.
	DomainFilter() *[]*string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// Sets a flag determining whether the health of the backend service should be evaluated when determining DNS routing.
	EvaluateTargetHealth() *bool
	// Sets the output format external dns will use when generating logs.
	LogFormat() ExternalDnsLogFormat
	// Controls the verbosity of logs generated using the external-dns service.
	LogLevel() ExternalDnsLogLevel
	// The Kubernetes namespace where the service should be deployed.
	Namespace() *string
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// When true, alias records will be avoided and CNAME records will be used instead.
	PreferCname() *bool
	// Registry specifying how ExternalDNS should track record ownership.
	//
	// Without a registry to track record ownership, External has no way to know
	// which records it owns and manages and which are owned and managed by a
	// different service.
	//
	// This can cause conflicts if there are multiple instances of External DNS
	// running or if there are other services managing DNS records in similar
	// zones as the different services could try to make conflicting changes due
	// to lacking a shared state.
	RecordOwnershipRegistry() IExternalDnsRegistry
	// Override the default region external-dns uses when calling AWS API's.
	Region() *string
	// Desired number of ExternalDNS replicas.
	ReplicaCount() *float64
	// The Kubernetes service account that is linked with the IAM Role that allows external-dns to make changes on your behalf.
	ServiceAccount() awseks.ServiceAccount
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Controls the operations ExternalDNS will perform on the records it manages.
	SyncPolicy() ExternalDnsSyncPolicy
	// The AWS tags that control which hosted zones external-dns is allowed to make changes for.
	ZoneTags() *[]*ExternalDnsZoneTag
	// Controls the types of hosted zones external-dns will create records for.
	ZoneType() ExternalDnsZoneType
	// Adds a domain to the domain filter list.
	//
	// The domain filter list acts as a whitelist for the domains/hosted zones
	// which external-dns will manage.
	//
	// When domains are added to the domain filter list, external-dns will only
	// create and manage records when their domain ends in with a domain that has
	// been approved.
	//
	// Returns: The external-dns service object that the domain filter was added
	// for.
	AddDomainFilter(domain *string) Route53Dns
	// Adds a zone tag filter to the external DNS service.
	//
	// When zone tags are provided only Routew 53 Hosted Zones that have matching
	// tags will be managed by external DNS.
	//
	// Returns: The external-dns service object that the zone tag was added for.
	AddZoneTag(tag *ExternalDnsZoneTag) Route53Dns
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Route53Dns
type jsiiProxy_Route53Dns struct {
	internal.Type__awscdkResource
}

func (j *jsiiProxy_Route53Dns) ApiRetries() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"apiRetries",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) BatchChangeSize() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"batchChangeSize",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Chart() awseks.HelmChart {
	var returns awseks.HelmChart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Cluster() awseks.ICluster {
	var returns awseks.ICluster
	_jsii_.Get(
		j,
		"cluster",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) DomainFilter() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"domainFilter",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) EvaluateTargetHealth() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"evaluateTargetHealth",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) LogFormat() ExternalDnsLogFormat {
	var returns ExternalDnsLogFormat
	_jsii_.Get(
		j,
		"logFormat",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) LogLevel() ExternalDnsLogLevel {
	var returns ExternalDnsLogLevel
	_jsii_.Get(
		j,
		"logLevel",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Namespace() *string {
	var returns *string
	_jsii_.Get(
		j,
		"namespace",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) PreferCname() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"preferCname",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) RecordOwnershipRegistry() IExternalDnsRegistry {
	var returns IExternalDnsRegistry
	_jsii_.Get(
		j,
		"recordOwnershipRegistry",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Region() *string {
	var returns *string
	_jsii_.Get(
		j,
		"region",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) ReplicaCount() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"replicaCount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) ServiceAccount() awseks.ServiceAccount {
	var returns awseks.ServiceAccount
	_jsii_.Get(
		j,
		"serviceAccount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) SyncPolicy() ExternalDnsSyncPolicy {
	var returns ExternalDnsSyncPolicy
	_jsii_.Get(
		j,
		"syncPolicy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) ZoneTags() *[]*ExternalDnsZoneTag {
	var returns *[]*ExternalDnsZoneTag
	_jsii_.Get(
		j,
		"zoneTags",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Route53Dns) ZoneType() ExternalDnsZoneType {
	var returns ExternalDnsZoneType
	_jsii_.Get(
		j,
		"zoneType",
		&returns,
	)
	return returns
}


// Creates a new instance of the Route53Dns class.
func NewRoute53Dns(scope constructs.Construct, id *string, props *Route53DnsProps) Route53Dns {
	_init_.Initialize()

	if err := validateNewRoute53DnsParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Route53Dns{}

	_jsii_.Create(
		"cdk-extensions.k8s_aws.Route53Dns",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the Route53Dns class.
func NewRoute53Dns_Override(r Route53Dns, scope constructs.Construct, id *string, props *Route53DnsProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.k8s_aws.Route53Dns",
		[]interface{}{scope, id, props},
		r,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func Route53Dns_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateRoute53Dns_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.k8s_aws.Route53Dns",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func Route53Dns_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateRoute53Dns_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.k8s_aws.Route53Dns",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func Route53Dns_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateRoute53Dns_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.k8s_aws.Route53Dns",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Route53Dns_CHART_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Route53Dns",
		"CHART_NAME",
		&returns,
	)
	return returns
}

func Route53Dns_CHART_REPOSITORY() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Route53Dns",
		"CHART_REPOSITORY",
		&returns,
	)
	return returns
}

func Route53Dns_DEFAULT_NAMESPACE() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Route53Dns",
		"DEFAULT_NAMESPACE",
		&returns,
	)
	return returns
}

func (r *jsiiProxy_Route53Dns) AddDomainFilter(domain *string) Route53Dns {
	if err := r.validateAddDomainFilterParameters(domain); err != nil {
		panic(err)
	}
	var returns Route53Dns

	_jsii_.Invoke(
		r,
		"addDomainFilter",
		[]interface{}{domain},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_Route53Dns) AddZoneTag(tag *ExternalDnsZoneTag) Route53Dns {
	if err := r.validateAddZoneTagParameters(tag); err != nil {
		panic(err)
	}
	var returns Route53Dns

	_jsii_.Invoke(
		r,
		"addZoneTag",
		[]interface{}{tag},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_Route53Dns) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := r.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		r,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (r *jsiiProxy_Route53Dns) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		r,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_Route53Dns) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := r.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		r,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_Route53Dns) GetResourceNameAttribute(nameAttr *string) *string {
	if err := r.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		r,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_Route53Dns) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		r,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

