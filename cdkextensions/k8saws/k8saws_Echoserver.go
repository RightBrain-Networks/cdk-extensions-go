package k8saws

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsec2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awseks"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/k8saws/internal"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/route53"
)

// Creates a simple Kubernetes test service using the Google echoserver test image.
//
// The server listens for incoming web requests and echos the details of the
// request back to the user. Each request results in output being written to
// the Docker log providing a convenient way to test logging setup.
// See: [Google echoserver image repository](https://console.cloud.google.com/gcr/images/google-containers/GLOBAL/echoserver)
//
type Echoserver interface {
	awscdk.Resource
	awsec2.IConnectable
	route53.IDnsResolvable
	// The EKS Cluster where the service should be deployed.
	Cluster() awseks.ICluster
	// Access for network connections.
	Connections() awsec2.Connections
	// Determines the behavior of automatic DNS discovery and configuration.
	DomainDiscovery() route53.DomainDiscovery
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The subnets where the load balancer should be created..
	LoadBalancerSubnets() *awsec2.SubnetSelection
	// The Kubernetes manifest that creates the ConfigMap that Fargate uses to configure logging.
	Manifest() awseks.KubernetesManifest
	// The name of the Kubernetes service to be created.
	Name() *string
	// The Kubernetes namespace where the service should be created.
	Namespace() *string
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	PhysicalName() *string
	// The port which netcat should listen on.
	Port() *float64
	// The number of replicas that should exist.
	Replicas() *float64
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// A subdomain that should be prefixed to the beginning of all registered domains.
	Subdomain() *string
	// The Docker tag specifying the version of echoserver to use.
	// See: [Google echoserver image repository](https://console.cloud.google.com/gcr/images/google-containers/GLOBAL/echoserver)
	//
	Tag() *string
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	RegisterDomain(domain route53.Domain)
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Echoserver
type jsiiProxy_Echoserver struct {
	internal.Type__awscdkResource
	internal.Type__awsec2IConnectable
	internal.Type__route53IDnsResolvable
}

func (j *jsiiProxy_Echoserver) Cluster() awseks.ICluster {
	var returns awseks.ICluster
	_jsii_.Get(
		j,
		"cluster",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Connections() awsec2.Connections {
	var returns awsec2.Connections
	_jsii_.Get(
		j,
		"connections",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) DomainDiscovery() route53.DomainDiscovery {
	var returns route53.DomainDiscovery
	_jsii_.Get(
		j,
		"domainDiscovery",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) LoadBalancerSubnets() *awsec2.SubnetSelection {
	var returns *awsec2.SubnetSelection
	_jsii_.Get(
		j,
		"loadBalancerSubnets",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Manifest() awseks.KubernetesManifest {
	var returns awseks.KubernetesManifest
	_jsii_.Get(
		j,
		"manifest",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Namespace() *string {
	var returns *string
	_jsii_.Get(
		j,
		"namespace",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Port() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"port",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Replicas() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"replicas",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Subdomain() *string {
	var returns *string
	_jsii_.Get(
		j,
		"subdomain",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Echoserver) Tag() *string {
	var returns *string
	_jsii_.Get(
		j,
		"tag",
		&returns,
	)
	return returns
}


// Creates a new instance of the Echoserver class.
func NewEchoserver(scope constructs.Construct, id *string, props *EchoserverProps) Echoserver {
	_init_.Initialize()

	if err := validateNewEchoserverParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Echoserver{}

	_jsii_.Create(
		"cdk-extensions.k8s_aws.Echoserver",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the Echoserver class.
func NewEchoserver_Override(e Echoserver, scope constructs.Construct, id *string, props *EchoserverProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.k8s_aws.Echoserver",
		[]interface{}{scope, id, props},
		e,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func Echoserver_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateEchoserver_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.k8s_aws.Echoserver",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func Echoserver_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateEchoserver_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.k8s_aws.Echoserver",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func Echoserver_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateEchoserver_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.k8s_aws.Echoserver",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Echoserver_DEFAULT_DOMAIN_DISCOVERY() route53.DomainDiscovery {
	_init_.Initialize()
	var returns route53.DomainDiscovery
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_DOMAIN_DISCOVERY",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_LOAD_BALANCER_SUBNETS() *awsec2.SubnetSelection {
	_init_.Initialize()
	var returns *awsec2.SubnetSelection
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_LOAD_BALANCER_SUBNETS",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_NAME() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_NAME",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_NAMESPACE() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_NAMESPACE",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_PORT() *float64 {
	_init_.Initialize()
	var returns *float64
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_PORT",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_REPLICAS() *float64 {
	_init_.Initialize()
	var returns *float64
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_REPLICAS",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_REPOSITORY() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_REPOSITORY",
		&returns,
	)
	return returns
}

func Echoserver_DEFAULT_TAG() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-extensions.k8s_aws.Echoserver",
		"DEFAULT_TAG",
		&returns,
	)
	return returns
}

func (e *jsiiProxy_Echoserver) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := e.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		e,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (e *jsiiProxy_Echoserver) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Echoserver) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := e.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		e,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Echoserver) GetResourceNameAttribute(nameAttr *string) *string {
	if err := e.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		e,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Echoserver) RegisterDomain(domain route53.Domain) {
	if err := e.validateRegisterDomainParameters(domain); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		e,
		"registerDomain",
		[]interface{}{domain},
	)
}

func (e *jsiiProxy_Echoserver) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

