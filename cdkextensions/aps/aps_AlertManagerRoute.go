package aps

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/aps/internal"
)

// Defines a node in a routing tree and its children.
//
// Its optional
// configuration parameters are inherited from its parent node if not set.
//
// Every alert enters the routing tree at the configured top-level route, which
// must match all alerts (i.e. not have any configured matchers). It then
// traverses the child nodes. If `continueMatching` is set to `false`, it stops
// after the first matching child. If `continueMatching` is `true` on a
// matching node, the alert will continue matching against subsequent siblings.
// If an alert does not match any children of a node (no matching child nodes,
// or none exist), the alert is handled based on the configuration parameters
// of the current node.
// See: [Route Official Documentation](https://prometheus.io/docs/alerting/latest/configuration/#route)
//
type AlertManagerRoute interface {
	constructs.Construct
	// Times when the route should be active.
	//
	// An empty value means that the route
	// is always active. Additionally, the root node cannot have any active
	// times.
	//
	// The route will send notifications only when active, but otherwise acts
	// normally (including ending the route-matching process if the
	// `continueMatching` option is not set).
	ActiveTimeIntervals() *[]TimeInterval
	// Optional child routes to add to the node.
	Children() *[]AlertManagerRoute
	// Whether an alert should continue matching subsequent sibling nodes.
	ContinueMatching() *bool
	// The labels by which incoming alerts are grouped together.
	//
	// For example,
	// multiple alerts coming in for cluster=A and alertname=LatencyHigh would be
	// batched into a single group.
	GroupByLabels() *[]*string
	// How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent (usually ~5m or more).
	GroupInterval() awscdk.Duration
	// How long to initially wait to send a notification for a group of alerts.
	//
	// Allows to wait for an inhibiting alert to arrive or collect more initial
	// alerts for the same group (usually ~0s to few minutes).
	GroupWait() awscdk.Duration
	// A list of matchers that an alert has to fulfill to match the node.
	Matchers() *[]AlertManagerMatcher
	// Times when the route should be muted. The root node cannot have any mute times.
	//
	// When a route is muted it will not send any notifications, but otherwise
	// acts normally (including ending the route-matching process if the
	// `continueMatching` option is not set).
	MuteTimeIntervals() *[]TimeInterval
	// The tree node.
	Node() constructs.Node
	// The receiver that should be the target of alerts that are generated by the node.
	Receiver() AlertManagerReceiver
	// How long to wait before sending a notification again if it has already been sent successfully for an alert.
	//
	// (Usually ~3h or more).
	RepeatInterval() awscdk.Duration
	// Adds a new time when the route should be active. The root node cannot have any active times.
	//
	// The route will send notifications only when active, but otherwise acts
	// normally (including ending the route-matching process if the
	// `continueMatching` option is not set).
	//
	// Returns: The route where the interval was associated.
	AddActiveTimeInterval(interval TimeInterval) AlertManagerRoute
	// Adds a new child route to this node.
	//
	// Returns: The child route that was added.
	AddChild(id *string, options *AlertManagerRouteProps) AlertManagerRoute
	// Adds a label by which incoming alerts are grouped together.
	//
	// For example,
	// multiple alerts coming in for cluster=A and alertname=LatencyHigh would be
	// batched into a single group.
	//
	// Returns: The route where the label was associated.
	AddGroupByLabel(label *string) AlertManagerRoute
	// Adds a matcher that an alert has to fulfill to match the node.
	//
	// Returns: The route where the matcher was associated.
	AddMatcher(matcher AlertManagerMatcher) AlertManagerRoute
	// Adds a time when the route should be muted. The root node cannot have any mute times.
	//
	// When a route is muted it will not send any notifications, but otherwise
	// acts normally (including ending the route-matching process if the
	// `continueMatching` option is not set).
	AddMuteTimeInterval(interval TimeInterval) AlertManagerRoute
	// Associates the route with a construct that is handling the configuration of alert manager that will consume the configuration.
	//
	// Returns: An alert manager `route` configuration object.
	Bind(scope constructs.IConstruct) *map[string]interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for AlertManagerRoute
type jsiiProxy_AlertManagerRoute struct {
	internal.Type__constructsConstruct
}

func (j *jsiiProxy_AlertManagerRoute) ActiveTimeIntervals() *[]TimeInterval {
	var returns *[]TimeInterval
	_jsii_.Get(
		j,
		"activeTimeIntervals",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) Children() *[]AlertManagerRoute {
	var returns *[]AlertManagerRoute
	_jsii_.Get(
		j,
		"children",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) ContinueMatching() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"continueMatching",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) GroupByLabels() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"groupByLabels",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) GroupInterval() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"groupInterval",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) GroupWait() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"groupWait",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) Matchers() *[]AlertManagerMatcher {
	var returns *[]AlertManagerMatcher
	_jsii_.Get(
		j,
		"matchers",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) MuteTimeIntervals() *[]TimeInterval {
	var returns *[]TimeInterval
	_jsii_.Get(
		j,
		"muteTimeIntervals",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) Receiver() AlertManagerReceiver {
	var returns AlertManagerReceiver
	_jsii_.Get(
		j,
		"receiver",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlertManagerRoute) RepeatInterval() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"repeatInterval",
		&returns,
	)
	return returns
}


// Creates a new instance of the AlertManagerRoute class.
func NewAlertManagerRoute(scope interface{}, id *string, options *AlertManagerRouteProps) AlertManagerRoute {
	_init_.Initialize()

	if err := validateNewAlertManagerRouteParameters(scope, id, options); err != nil {
		panic(err)
	}
	j := jsiiProxy_AlertManagerRoute{}

	_jsii_.Create(
		"cdk-extensions.aps.AlertManagerRoute",
		[]interface{}{scope, id, options},
		&j,
	)

	return &j
}

// Creates a new instance of the AlertManagerRoute class.
func NewAlertManagerRoute_Override(a AlertManagerRoute, scope interface{}, id *string, options *AlertManagerRouteProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.aps.AlertManagerRoute",
		[]interface{}{scope, id, options},
		a,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func AlertManagerRoute_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateAlertManagerRoute_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.AlertManagerRoute",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) AddActiveTimeInterval(interval TimeInterval) AlertManagerRoute {
	if err := a.validateAddActiveTimeIntervalParameters(interval); err != nil {
		panic(err)
	}
	var returns AlertManagerRoute

	_jsii_.Invoke(
		a,
		"addActiveTimeInterval",
		[]interface{}{interval},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) AddChild(id *string, options *AlertManagerRouteProps) AlertManagerRoute {
	if err := a.validateAddChildParameters(id, options); err != nil {
		panic(err)
	}
	var returns AlertManagerRoute

	_jsii_.Invoke(
		a,
		"addChild",
		[]interface{}{id, options},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) AddGroupByLabel(label *string) AlertManagerRoute {
	if err := a.validateAddGroupByLabelParameters(label); err != nil {
		panic(err)
	}
	var returns AlertManagerRoute

	_jsii_.Invoke(
		a,
		"addGroupByLabel",
		[]interface{}{label},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) AddMatcher(matcher AlertManagerMatcher) AlertManagerRoute {
	if err := a.validateAddMatcherParameters(matcher); err != nil {
		panic(err)
	}
	var returns AlertManagerRoute

	_jsii_.Invoke(
		a,
		"addMatcher",
		[]interface{}{matcher},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) AddMuteTimeInterval(interval TimeInterval) AlertManagerRoute {
	if err := a.validateAddMuteTimeIntervalParameters(interval); err != nil {
		panic(err)
	}
	var returns AlertManagerRoute

	_jsii_.Invoke(
		a,
		"addMuteTimeInterval",
		[]interface{}{interval},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) Bind(scope constructs.IConstruct) *map[string]interface{} {
	if err := a.validateBindParameters(scope); err != nil {
		panic(err)
	}
	var returns *map[string]interface{}

	_jsii_.Invoke(
		a,
		"bind",
		[]interface{}{scope},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlertManagerRoute) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

