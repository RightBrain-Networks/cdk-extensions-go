package aps

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsaps"
	"github.com/aws/aws-cdk-go/awscdk/v2/awslogs"
	"github.com/aws/aws-cdk-go/awscdk/v2/awssns"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/aps/internal"
)

// Represents an Amazon Managed Service for Prometheus workspace.
//
// A _workspace_ is a logical and isolated Prometheus server dedicated to
// Prometheus resources such as metrics.
//
// You can have one or more workspaces in each Region in your account.
// See: [AWS::APS::Workspace](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#aws-resource-aps-workspace-return-values)
//
type Workspace interface {
	awscdk.Resource
	IWorkspace
	// The details used to configure alerting for the APS workspace.
	// See: [Workspace AlertManagerDefinition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-alertmanagerdefinition)
	//
	Alerting() *WorkspaceAlertingOptions
	// The configuration contolling how alerts are sent for the workspace.
	//
	// Only
	// available when alerting is enabled and the default alerting configuration
	// is used.
	AlertManagerConfiguration() AlertManagerConfiguration
	// The SNS topic where alerts generated by the workspace will be sent.
	//
	// Only
	// set if alerting is enabled and the default alert manager configuration is
	// used.
	AlertTopic() awssns.ITopic
	// An alias that you assign to this workspace to help you identify it. It does not need to be unique.
	//
	// The alias can be as many as 100 characters and can include any type of
	// characters.
	// See: [Workspace Alias](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-alias)
	//
	Alias() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The details used for configuring logging for the APS workspace.
	// See: [Workspace LoggingConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-loggingconfiguration)
	//
	Logging() *WorkspaceLoggingOptions
	// The CloudWatch log group where logs emitted by the APS workspace will be sent.
	LogGroup() awslogs.ILogGroup
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	PhysicalName() *string
	// The underlying Workspace CloudFormation resource.
	// See: [AWS::APS::Workspace](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html)
	//
	Resource() awsaps.CfnWorkspace
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// The Amazon Resource Name (ARN) of the APS workspace.
	WorkspaceArn() *string
	// The ID generated by AWS for the APS workspace.
	WorkspaceId() *string
	// The Prometheus endpoint attribute of the workspace.
	//
	// This is the endpoint prefix without the remote_write or query API
	// appended.
	WorkspacePrometheusEndpoint() *string
	// The URL of the remote write endpoint which can be used to ingest metrics into the Prometheus workspace.
	WorkspaceQueryUrl() *string
	// The URL of the endpoint that other services can use to query the workspace.
	WorkspaceRemoteWriteUrl() *string
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Workspace
type jsiiProxy_Workspace struct {
	internal.Type__awscdkResource
	jsiiProxy_IWorkspace
}

func (j *jsiiProxy_Workspace) Alerting() *WorkspaceAlertingOptions {
	var returns *WorkspaceAlertingOptions
	_jsii_.Get(
		j,
		"alerting",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) AlertManagerConfiguration() AlertManagerConfiguration {
	var returns AlertManagerConfiguration
	_jsii_.Get(
		j,
		"alertManagerConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) AlertTopic() awssns.ITopic {
	var returns awssns.ITopic
	_jsii_.Get(
		j,
		"alertTopic",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Alias() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alias",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Logging() *WorkspaceLoggingOptions {
	var returns *WorkspaceLoggingOptions
	_jsii_.Get(
		j,
		"logging",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) LogGroup() awslogs.ILogGroup {
	var returns awslogs.ILogGroup
	_jsii_.Get(
		j,
		"logGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Resource() awsaps.CfnWorkspace {
	var returns awsaps.CfnWorkspace
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspaceArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspaceId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspacePrometheusEndpoint() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspacePrometheusEndpoint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspaceQueryUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceQueryUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspaceRemoteWriteUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceRemoteWriteUrl",
		&returns,
	)
	return returns
}


// Creates a new instance of the Workspace class.
func NewWorkspace(scope constructs.IConstruct, id *string, props *WorkspaceProps) Workspace {
	_init_.Initialize()

	if err := validateNewWorkspaceParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Workspace{}

	_jsii_.Create(
		"cdk-extensions.aps.Workspace",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the Workspace class.
func NewWorkspace_Override(w Workspace, scope constructs.IConstruct, id *string, props *WorkspaceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.aps.Workspace",
		[]interface{}{scope, id, props},
		w,
	)
}

// Imports an existing APS workspace by specifying its Amazon Resource Name (ARN).
//
// Returns: An object representing the imported APS workspace.
func Workspace_FromWorkspaceArn(scope constructs.IConstruct, id *string, workspaceArn *string) IWorkspace {
	_init_.Initialize()

	if err := validateWorkspace_FromWorkspaceArnParameters(scope, id, workspaceArn); err != nil {
		panic(err)
	}
	var returns IWorkspace

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.Workspace",
		"fromWorkspaceArn",
		[]interface{}{scope, id, workspaceArn},
		&returns,
	)

	return returns
}

// Imports an existing APS workspace by explicitly specifying its attributes.
//
// Returns: An object representing the imported APS workspace.
func Workspace_FromWorkspaceAttributes(scope constructs.IConstruct, id *string, attrs *WorkspaceAttributes) IWorkspace {
	_init_.Initialize()

	if err := validateWorkspace_FromWorkspaceAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IWorkspace

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.Workspace",
		"fromWorkspaceAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Imports an existing APS workspace by explicitly specifying its AWS generated ID.
//
// Returns: An object representing the imported APS workspace.
func Workspace_FromWorkspaceId(scope constructs.IConstruct, id *string, workspaceId *string) IWorkspace {
	_init_.Initialize()

	if err := validateWorkspace_FromWorkspaceIdParameters(scope, id, workspaceId); err != nil {
		panic(err)
	}
	var returns IWorkspace

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.Workspace",
		"fromWorkspaceId",
		[]interface{}{scope, id, workspaceId},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func Workspace_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.Workspace",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func Workspace_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.Workspace",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func Workspace_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.aps.Workspace",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := w.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		w,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (w *jsiiProxy_Workspace) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		w,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := w.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) GetResourceNameAttribute(nameAttr *string) *string {
	if err := w.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		w,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

