package gluetables

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/vibe-io/cdk-extensions-go/cdkextensions/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsglue"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/athena"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/glue"
	"github.com/vibe-io/cdk-extensions-go/cdkextensions/gluetables/internal"
)

type S3AccessLogsTable interface {
	glue.Table
	Compressed() *bool
	// Boolean indicating whether to create default Athena queries for the S3 Access Logs.
	// See: [`CfnNamedQueries`](https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_athena/CfnNamedQuery.html)
	//
	CreateQueries() *bool
	Database() glue.Database
	DataFormat() glue.DataFormat
	Description() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// Boolean for adding "friendly names" for the created Athena queries.
	FriendlyQueryNames() *bool
	Location() *string
	Name() *string
	// The tree node.
	Node() constructs.Node
	Owner() *string
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	PhysicalName() *string
	RequestErrorsNamedQuery() athena.NamedQuery
	Resource() awsglue.CfnTable
	Retention() awscdk.Duration
	SerdeName() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	StoredAsSubDirectories() *bool
	TableArn() *string
	TableName() *string
	TableType() glue.TableType
	TargetTable() glue.Table
	ViewExpandedText() *string
	ViewOriginalText() *string
	AddColumn(column glue.Column)
	AddParameter(key *string, value *string)
	AddPartitionKey(column glue.Column)
	AddSerdeParameter(key *string, value *string)
	AddStorageParameter(key *string, value *string)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	RenderStorageDescriptor() *awsglue.CfnTable_StorageDescriptorProperty
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for S3AccessLogsTable
type jsiiProxy_S3AccessLogsTable struct {
	internal.Type__glueTable
}

func (j *jsiiProxy_S3AccessLogsTable) Compressed() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"compressed",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) CreateQueries() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"createQueries",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Database() glue.Database {
	var returns glue.Database
	_jsii_.Get(
		j,
		"database",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) DataFormat() glue.DataFormat {
	var returns glue.DataFormat
	_jsii_.Get(
		j,
		"dataFormat",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) FriendlyQueryNames() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"friendlyQueryNames",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Location() *string {
	var returns *string
	_jsii_.Get(
		j,
		"location",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Owner() *string {
	var returns *string
	_jsii_.Get(
		j,
		"owner",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) RequestErrorsNamedQuery() athena.NamedQuery {
	var returns athena.NamedQuery
	_jsii_.Get(
		j,
		"requestErrorsNamedQuery",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Resource() awsglue.CfnTable {
	var returns awsglue.CfnTable
	_jsii_.Get(
		j,
		"resource",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Retention() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"retention",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) SerdeName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"serdeName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) StoredAsSubDirectories() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"storedAsSubDirectories",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) TableArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"tableArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) TableName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"tableName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) TableType() glue.TableType {
	var returns glue.TableType
	_jsii_.Get(
		j,
		"tableType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) TargetTable() glue.Table {
	var returns glue.Table
	_jsii_.Get(
		j,
		"targetTable",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) ViewExpandedText() *string {
	var returns *string
	_jsii_.Get(
		j,
		"viewExpandedText",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3AccessLogsTable) ViewOriginalText() *string {
	var returns *string
	_jsii_.Get(
		j,
		"viewOriginalText",
		&returns,
	)
	return returns
}


// Creates a new instance of the S3AccessLogsTable class.
func NewS3AccessLogsTable(scope constructs.Construct, id *string, props *S3AccessLogsTableProps) S3AccessLogsTable {
	_init_.Initialize()

	if err := validateNewS3AccessLogsTableParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_S3AccessLogsTable{}

	_jsii_.Create(
		"cdk-extensions.glue_tables.S3AccessLogsTable",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Creates a new instance of the S3AccessLogsTable class.
func NewS3AccessLogsTable_Override(s S3AccessLogsTable, scope constructs.Construct, id *string, props *S3AccessLogsTableProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-extensions.glue_tables.S3AccessLogsTable",
		[]interface{}{scope, id, props},
		s,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func S3AccessLogsTable_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateS3AccessLogsTable_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.glue_tables.S3AccessLogsTable",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func S3AccessLogsTable_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateS3AccessLogsTable_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.glue_tables.S3AccessLogsTable",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func S3AccessLogsTable_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateS3AccessLogsTable_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-extensions.glue_tables.S3AccessLogsTable",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3AccessLogsTable) AddColumn(column glue.Column) {
	if err := s.validateAddColumnParameters(column); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"addColumn",
		[]interface{}{column},
	)
}

func (s *jsiiProxy_S3AccessLogsTable) AddParameter(key *string, value *string) {
	if err := s.validateAddParameterParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"addParameter",
		[]interface{}{key, value},
	)
}

func (s *jsiiProxy_S3AccessLogsTable) AddPartitionKey(column glue.Column) {
	if err := s.validateAddPartitionKeyParameters(column); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"addPartitionKey",
		[]interface{}{column},
	)
}

func (s *jsiiProxy_S3AccessLogsTable) AddSerdeParameter(key *string, value *string) {
	if err := s.validateAddSerdeParameterParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"addSerdeParameter",
		[]interface{}{key, value},
	)
}

func (s *jsiiProxy_S3AccessLogsTable) AddStorageParameter(key *string, value *string) {
	if err := s.validateAddStorageParameterParameters(key, value); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"addStorageParameter",
		[]interface{}{key, value},
	)
}

func (s *jsiiProxy_S3AccessLogsTable) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := s.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (s *jsiiProxy_S3AccessLogsTable) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3AccessLogsTable) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := s.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3AccessLogsTable) GetResourceNameAttribute(nameAttr *string) *string {
	if err := s.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3AccessLogsTable) RenderStorageDescriptor() *awsglue.CfnTable_StorageDescriptorProperty {
	var returns *awsglue.CfnTable_StorageDescriptorProperty

	_jsii_.Invoke(
		s,
		"renderStorageDescriptor",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3AccessLogsTable) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

